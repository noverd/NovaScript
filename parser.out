Grammar:

Rule 0     S' -> expr
Rule 1     expr -> DEFINE ID ( ) { expr }
Rule 2     expr -> DEFINE ID ( args ) { expr }
Rule 3     expr -> EVENT ID ( ) { expr }
Rule 4     expr -> EVENT ID ( args ) { expr }
Rule 5     expr -> FOR ( ID ; expr ; expr ) { expr }
Rule 6     expr -> IF ( expr ) { expr }
Rule 7     expr -> IF ( expr ) { expr } ELSE { expr }
Rule 8     expr -> SPRITE ID { expr }
Rule 9     expr -> ID ( )
Rule 10    expr -> ID ( expr )
Rule 11    expr -> ID ASSING expr
Rule 12    expr -> expr OR expr
Rule 13    expr -> expr AND expr
Rule 14    expr -> expr BIGGER expr
Rule 15    expr -> expr SMALLER expr
Rule 16    expr -> expr / expr
Rule 17    expr -> expr * expr
Rule 18    expr -> expr - expr
Rule 19    expr -> expr + expr
Rule 20    expr -> expr BOEQ expr
Rule 21    expr -> expr SOEQ expr
Rule 22    expr -> expr INEQUALITY expr
Rule 23    expr -> expr EQUALITY expr
Rule 24    expr -> NUMBER
Rule 25    expr -> STRING
Rule 26    expr -> ID
Rule 27    args -> expr
Rule 28    args -> expr COMMA expr
Rule 29    args -> args COMMA expr

Unused terminals:

    WHILE

Terminals, with rules where they appear:

(                    : 1 2 3 4 5 6 7 9 10
)                    : 1 2 3 4 5 6 7 9 10
*                    : 17
+                    : 19
-                    : 18
/                    : 16
;                    : 5 5
AND                  : 13
ASSING               : 11
BIGGER               : 14
BOEQ                 : 20
COMMA                : 28 29
DEFINE               : 1 2
ELSE                 : 7
EQUALITY             : 23
EVENT                : 3 4
FOR                  : 5
ID                   : 1 2 3 4 5 8 9 10 11 26
IF                   : 6 7
INEQUALITY           : 22
NUMBER               : 24
OR                   : 12
SMALLER              : 15
SOEQ                 : 21
SPRITE               : 8
STRING               : 25
WHILE                : 
error                : 
{                    : 1 2 3 4 5 6 7 7 8
}                    : 1 2 3 4 5 6 7 7 8

Nonterminals, with rules where they appear:

args                 : 2 4 29
expr                 : 1 2 3 4 5 5 5 6 6 7 7 7 8 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 27 28 28 29 0


state 0

    (0) S' -> . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 2

    (1) expr -> DEFINE . ID ( ) { expr }
    (2) expr -> DEFINE . ID ( args ) { expr }
    ID              shift and go to state 22


state 3

    (9) expr -> ID . ( )
    (10) expr -> ID . ( expr )
    (11) expr -> ID . ASSING expr
    (26) expr -> ID .
    (               shift and go to state 23
    ASSING          shift and go to state 24
    OR              reduce using rule 26 (expr -> ID .)
    AND             reduce using rule 26 (expr -> ID .)
    BIGGER          reduce using rule 26 (expr -> ID .)
    SMALLER         reduce using rule 26 (expr -> ID .)
    /               reduce using rule 26 (expr -> ID .)
    *               reduce using rule 26 (expr -> ID .)
    -               reduce using rule 26 (expr -> ID .)
    +               reduce using rule 26 (expr -> ID .)
    BOEQ            reduce using rule 26 (expr -> ID .)
    SOEQ            reduce using rule 26 (expr -> ID .)
    INEQUALITY      reduce using rule 26 (expr -> ID .)
    EQUALITY        reduce using rule 26 (expr -> ID .)
    $end            reduce using rule 26 (expr -> ID .)
    )               reduce using rule 26 (expr -> ID .)
    COMMA           reduce using rule 26 (expr -> ID .)
    }               reduce using rule 26 (expr -> ID .)
    ;               reduce using rule 26 (expr -> ID .)


state 4

    (3) expr -> EVENT . ID ( ) { expr }
    (4) expr -> EVENT . ID ( args ) { expr }
    ID              shift and go to state 25


state 5

    (5) expr -> FOR . ( ID ; expr ; expr ) { expr }
    (               shift and go to state 26


state 6

    (6) expr -> IF . ( expr ) { expr }
    (7) expr -> IF . ( expr ) { expr } ELSE { expr }
    (               shift and go to state 27


state 7

    (8) expr -> SPRITE . ID { expr }
    ID              shift and go to state 28


state 8

    (24) expr -> NUMBER .
    OR              reduce using rule 24 (expr -> NUMBER .)
    AND             reduce using rule 24 (expr -> NUMBER .)
    BIGGER          reduce using rule 24 (expr -> NUMBER .)
    SMALLER         reduce using rule 24 (expr -> NUMBER .)
    /               reduce using rule 24 (expr -> NUMBER .)
    *               reduce using rule 24 (expr -> NUMBER .)
    -               reduce using rule 24 (expr -> NUMBER .)
    +               reduce using rule 24 (expr -> NUMBER .)
    BOEQ            reduce using rule 24 (expr -> NUMBER .)
    SOEQ            reduce using rule 24 (expr -> NUMBER .)
    INEQUALITY      reduce using rule 24 (expr -> NUMBER .)
    EQUALITY        reduce using rule 24 (expr -> NUMBER .)
    $end            reduce using rule 24 (expr -> NUMBER .)
    )               reduce using rule 24 (expr -> NUMBER .)
    COMMA           reduce using rule 24 (expr -> NUMBER .)
    }               reduce using rule 24 (expr -> NUMBER .)
    ;               reduce using rule 24 (expr -> NUMBER .)


state 9

    (25) expr -> STRING .
    OR              reduce using rule 25 (expr -> STRING .)
    AND             reduce using rule 25 (expr -> STRING .)
    BIGGER          reduce using rule 25 (expr -> STRING .)
    SMALLER         reduce using rule 25 (expr -> STRING .)
    /               reduce using rule 25 (expr -> STRING .)
    *               reduce using rule 25 (expr -> STRING .)
    -               reduce using rule 25 (expr -> STRING .)
    +               reduce using rule 25 (expr -> STRING .)
    BOEQ            reduce using rule 25 (expr -> STRING .)
    SOEQ            reduce using rule 25 (expr -> STRING .)
    INEQUALITY      reduce using rule 25 (expr -> STRING .)
    EQUALITY        reduce using rule 25 (expr -> STRING .)
    $end            reduce using rule 25 (expr -> STRING .)
    )               reduce using rule 25 (expr -> STRING .)
    COMMA           reduce using rule 25 (expr -> STRING .)
    }               reduce using rule 25 (expr -> STRING .)
    ;               reduce using rule 25 (expr -> STRING .)


state 10

    (12) expr -> expr OR . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 29

state 11

    (13) expr -> expr AND . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 30

state 12

    (14) expr -> expr BIGGER . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 31

state 13

    (15) expr -> expr SMALLER . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 32

state 14

    (16) expr -> expr / . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 33

state 15

    (17) expr -> expr * . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 34

state 16

    (18) expr -> expr - . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 35

state 17

    (19) expr -> expr + . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 36

state 18

    (20) expr -> expr BOEQ . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 37

state 19

    (21) expr -> expr SOEQ . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 38

state 20

    (22) expr -> expr INEQUALITY . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 39

state 21

    (23) expr -> expr EQUALITY . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 40

state 22

    (1) expr -> DEFINE ID . ( ) { expr }
    (2) expr -> DEFINE ID . ( args ) { expr }
    (               shift and go to state 41


state 23

    (9) expr -> ID ( . )
    (10) expr -> ID ( . expr )
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    )               shift and go to state 42
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 43

state 24

    (11) expr -> ID ASSING . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 44

state 25

    (3) expr -> EVENT ID . ( ) { expr }
    (4) expr -> EVENT ID . ( args ) { expr }
    (               shift and go to state 45


state 26

    (5) expr -> FOR ( . ID ; expr ; expr ) { expr }
    ID              shift and go to state 46


state 27

    (6) expr -> IF ( . expr ) { expr }
    (7) expr -> IF ( . expr ) { expr } ELSE { expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 47

state 28

    (8) expr -> SPRITE ID . { expr }
    {               shift and go to state 48


state 29

    (12) expr -> expr OR expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 12 (expr -> expr OR expr .)
    )               reduce using rule 12 (expr -> expr OR expr .)
    COMMA           reduce using rule 12 (expr -> expr OR expr .)
    }               reduce using rule 12 (expr -> expr OR expr .)
    ;               reduce using rule 12 (expr -> expr OR expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 30

    (13) expr -> expr AND expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 13 (expr -> expr AND expr .)
    )               reduce using rule 13 (expr -> expr AND expr .)
    COMMA           reduce using rule 13 (expr -> expr AND expr .)
    }               reduce using rule 13 (expr -> expr AND expr .)
    ;               reduce using rule 13 (expr -> expr AND expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 31

    (14) expr -> expr BIGGER expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 14 (expr -> expr BIGGER expr .)
    )               reduce using rule 14 (expr -> expr BIGGER expr .)
    COMMA           reduce using rule 14 (expr -> expr BIGGER expr .)
    }               reduce using rule 14 (expr -> expr BIGGER expr .)
    ;               reduce using rule 14 (expr -> expr BIGGER expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 32

    (15) expr -> expr SMALLER expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 15 (expr -> expr SMALLER expr .)
    )               reduce using rule 15 (expr -> expr SMALLER expr .)
    COMMA           reduce using rule 15 (expr -> expr SMALLER expr .)
    }               reduce using rule 15 (expr -> expr SMALLER expr .)
    ;               reduce using rule 15 (expr -> expr SMALLER expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 33

    (16) expr -> expr / expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 16 (expr -> expr / expr .)
    )               reduce using rule 16 (expr -> expr / expr .)
    COMMA           reduce using rule 16 (expr -> expr / expr .)
    }               reduce using rule 16 (expr -> expr / expr .)
    ;               reduce using rule 16 (expr -> expr / expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 34

    (17) expr -> expr * expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 17 (expr -> expr * expr .)
    )               reduce using rule 17 (expr -> expr * expr .)
    COMMA           reduce using rule 17 (expr -> expr * expr .)
    }               reduce using rule 17 (expr -> expr * expr .)
    ;               reduce using rule 17 (expr -> expr * expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 35

    (18) expr -> expr - expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 18 (expr -> expr - expr .)
    )               reduce using rule 18 (expr -> expr - expr .)
    COMMA           reduce using rule 18 (expr -> expr - expr .)
    }               reduce using rule 18 (expr -> expr - expr .)
    ;               reduce using rule 18 (expr -> expr - expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 36

    (19) expr -> expr + expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 19 (expr -> expr + expr .)
    )               reduce using rule 19 (expr -> expr + expr .)
    COMMA           reduce using rule 19 (expr -> expr + expr .)
    }               reduce using rule 19 (expr -> expr + expr .)
    ;               reduce using rule 19 (expr -> expr + expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 37

    (20) expr -> expr BOEQ expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 20 (expr -> expr BOEQ expr .)
    )               reduce using rule 20 (expr -> expr BOEQ expr .)
    COMMA           reduce using rule 20 (expr -> expr BOEQ expr .)
    }               reduce using rule 20 (expr -> expr BOEQ expr .)
    ;               reduce using rule 20 (expr -> expr BOEQ expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 38

    (21) expr -> expr SOEQ expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 21 (expr -> expr SOEQ expr .)
    )               reduce using rule 21 (expr -> expr SOEQ expr .)
    COMMA           reduce using rule 21 (expr -> expr SOEQ expr .)
    }               reduce using rule 21 (expr -> expr SOEQ expr .)
    ;               reduce using rule 21 (expr -> expr SOEQ expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 39

    (22) expr -> expr INEQUALITY expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 22 (expr -> expr INEQUALITY expr .)
    )               reduce using rule 22 (expr -> expr INEQUALITY expr .)
    COMMA           reduce using rule 22 (expr -> expr INEQUALITY expr .)
    }               reduce using rule 22 (expr -> expr INEQUALITY expr .)
    ;               reduce using rule 22 (expr -> expr INEQUALITY expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 40

    (23) expr -> expr EQUALITY expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 23 (expr -> expr EQUALITY expr .)
    )               reduce using rule 23 (expr -> expr EQUALITY expr .)
    COMMA           reduce using rule 23 (expr -> expr EQUALITY expr .)
    }               reduce using rule 23 (expr -> expr EQUALITY expr .)
    ;               reduce using rule 23 (expr -> expr EQUALITY expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 41

    (1) expr -> DEFINE ID ( . ) { expr }
    (2) expr -> DEFINE ID ( . args ) { expr }
    (27) args -> . expr
    (28) args -> . expr COMMA expr
    (29) args -> . args COMMA expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    )               shift and go to state 49
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 50
    args                           shift and go to state 51

state 42

    (9) expr -> ID ( ) .
    OR              reduce using rule 9 (expr -> ID ( ) .)
    AND             reduce using rule 9 (expr -> ID ( ) .)
    BIGGER          reduce using rule 9 (expr -> ID ( ) .)
    SMALLER         reduce using rule 9 (expr -> ID ( ) .)
    /               reduce using rule 9 (expr -> ID ( ) .)
    *               reduce using rule 9 (expr -> ID ( ) .)
    -               reduce using rule 9 (expr -> ID ( ) .)
    +               reduce using rule 9 (expr -> ID ( ) .)
    BOEQ            reduce using rule 9 (expr -> ID ( ) .)
    SOEQ            reduce using rule 9 (expr -> ID ( ) .)
    INEQUALITY      reduce using rule 9 (expr -> ID ( ) .)
    EQUALITY        reduce using rule 9 (expr -> ID ( ) .)
    $end            reduce using rule 9 (expr -> ID ( ) .)
    )               reduce using rule 9 (expr -> ID ( ) .)
    COMMA           reduce using rule 9 (expr -> ID ( ) .)
    }               reduce using rule 9 (expr -> ID ( ) .)
    ;               reduce using rule 9 (expr -> ID ( ) .)


state 43

    (10) expr -> ID ( expr . )
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    )               shift and go to state 52
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 44

    (11) expr -> ID ASSING expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BIGGER resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for BOEQ resolved as shift
  ! shift/reduce conflict for SOEQ resolved as shift
  ! shift/reduce conflict for INEQUALITY resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    $end            reduce using rule 11 (expr -> ID ASSING expr .)
    )               reduce using rule 11 (expr -> ID ASSING expr .)
    COMMA           reduce using rule 11 (expr -> ID ASSING expr .)
    }               reduce using rule 11 (expr -> ID ASSING expr .)
    ;               reduce using rule 11 (expr -> ID ASSING expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 45

    (3) expr -> EVENT ID ( . ) { expr }
    (4) expr -> EVENT ID ( . args ) { expr }
    (27) args -> . expr
    (28) args -> . expr COMMA expr
    (29) args -> . args COMMA expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    )               shift and go to state 53
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 50
    args                           shift and go to state 54

state 46

    (5) expr -> FOR ( ID . ; expr ; expr ) { expr }
    ;               shift and go to state 55


state 47

    (6) expr -> IF ( expr . ) { expr }
    (7) expr -> IF ( expr . ) { expr } ELSE { expr }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    )               shift and go to state 56
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 48

    (8) expr -> SPRITE ID { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 57

state 49

    (1) expr -> DEFINE ID ( ) . { expr }
    {               shift and go to state 58


state 50

    (27) args -> expr .
    (28) args -> expr . COMMA expr
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
  ! shift/reduce conflict for COMMA resolved as shift
    )               reduce using rule 27 (args -> expr .)
    COMMA           shift and go to state 59
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 51

    (2) expr -> DEFINE ID ( args . ) { expr }
    (29) args -> args . COMMA expr
    )               shift and go to state 60
    COMMA           shift and go to state 61


state 52

    (10) expr -> ID ( expr ) .
    OR              reduce using rule 10 (expr -> ID ( expr ) .)
    AND             reduce using rule 10 (expr -> ID ( expr ) .)
    BIGGER          reduce using rule 10 (expr -> ID ( expr ) .)
    SMALLER         reduce using rule 10 (expr -> ID ( expr ) .)
    /               reduce using rule 10 (expr -> ID ( expr ) .)
    *               reduce using rule 10 (expr -> ID ( expr ) .)
    -               reduce using rule 10 (expr -> ID ( expr ) .)
    +               reduce using rule 10 (expr -> ID ( expr ) .)
    BOEQ            reduce using rule 10 (expr -> ID ( expr ) .)
    SOEQ            reduce using rule 10 (expr -> ID ( expr ) .)
    INEQUALITY      reduce using rule 10 (expr -> ID ( expr ) .)
    EQUALITY        reduce using rule 10 (expr -> ID ( expr ) .)
    $end            reduce using rule 10 (expr -> ID ( expr ) .)
    )               reduce using rule 10 (expr -> ID ( expr ) .)
    COMMA           reduce using rule 10 (expr -> ID ( expr ) .)
    }               reduce using rule 10 (expr -> ID ( expr ) .)
    ;               reduce using rule 10 (expr -> ID ( expr ) .)


state 53

    (3) expr -> EVENT ID ( ) . { expr }
    {               shift and go to state 62


state 54

    (4) expr -> EVENT ID ( args . ) { expr }
    (29) args -> args . COMMA expr
    )               shift and go to state 63
    COMMA           shift and go to state 61


state 55

    (5) expr -> FOR ( ID ; . expr ; expr ) { expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 64

state 56

    (6) expr -> IF ( expr ) . { expr }
    (7) expr -> IF ( expr ) . { expr } ELSE { expr }
    {               shift and go to state 65


state 57

    (8) expr -> SPRITE ID { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 66
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 58

    (1) expr -> DEFINE ID ( ) { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 67

state 59

    (28) args -> expr COMMA . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 68

state 60

    (2) expr -> DEFINE ID ( args ) . { expr }
    {               shift and go to state 69


state 61

    (29) args -> args COMMA . expr
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 70

state 62

    (3) expr -> EVENT ID ( ) { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 71

state 63

    (4) expr -> EVENT ID ( args ) . { expr }
    {               shift and go to state 72


state 64

    (5) expr -> FOR ( ID ; expr . ; expr ) { expr }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    ;               shift and go to state 73
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 65

    (6) expr -> IF ( expr ) { . expr }
    (7) expr -> IF ( expr ) { . expr } ELSE { expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 74

state 66

    (8) expr -> SPRITE ID { expr } .
    OR              reduce using rule 8 (expr -> SPRITE ID { expr } .)
    AND             reduce using rule 8 (expr -> SPRITE ID { expr } .)
    BIGGER          reduce using rule 8 (expr -> SPRITE ID { expr } .)
    SMALLER         reduce using rule 8 (expr -> SPRITE ID { expr } .)
    /               reduce using rule 8 (expr -> SPRITE ID { expr } .)
    *               reduce using rule 8 (expr -> SPRITE ID { expr } .)
    -               reduce using rule 8 (expr -> SPRITE ID { expr } .)
    +               reduce using rule 8 (expr -> SPRITE ID { expr } .)
    BOEQ            reduce using rule 8 (expr -> SPRITE ID { expr } .)
    SOEQ            reduce using rule 8 (expr -> SPRITE ID { expr } .)
    INEQUALITY      reduce using rule 8 (expr -> SPRITE ID { expr } .)
    EQUALITY        reduce using rule 8 (expr -> SPRITE ID { expr } .)
    $end            reduce using rule 8 (expr -> SPRITE ID { expr } .)
    )               reduce using rule 8 (expr -> SPRITE ID { expr } .)
    COMMA           reduce using rule 8 (expr -> SPRITE ID { expr } .)
    }               reduce using rule 8 (expr -> SPRITE ID { expr } .)
    ;               reduce using rule 8 (expr -> SPRITE ID { expr } .)


state 67

    (1) expr -> DEFINE ID ( ) { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 75
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 68

    (28) args -> expr COMMA expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    )               reduce using rule 28 (args -> expr COMMA expr .)
    COMMA           reduce using rule 28 (args -> expr COMMA expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 69

    (2) expr -> DEFINE ID ( args ) { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 76

state 70

    (29) args -> args COMMA expr .
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    )               reduce using rule 29 (args -> args COMMA expr .)
    COMMA           reduce using rule 29 (args -> args COMMA expr .)
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 71

    (3) expr -> EVENT ID ( ) { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 77
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 72

    (4) expr -> EVENT ID ( args ) { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 78

state 73

    (5) expr -> FOR ( ID ; expr ; . expr ) { expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 79

state 74

    (6) expr -> IF ( expr ) { expr . }
    (7) expr -> IF ( expr ) { expr . } ELSE { expr }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 80
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 75

    (1) expr -> DEFINE ID ( ) { expr } .
    OR              reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    AND             reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    BIGGER          reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    SMALLER         reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    /               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    *               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    -               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    +               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    BOEQ            reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    SOEQ            reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    INEQUALITY      reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    EQUALITY        reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    $end            reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    )               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    COMMA           reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    }               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)
    ;               reduce using rule 1 (expr -> DEFINE ID ( ) { expr } .)


state 76

    (2) expr -> DEFINE ID ( args ) { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 81
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 77

    (3) expr -> EVENT ID ( ) { expr } .
    OR              reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    AND             reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    BIGGER          reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    SMALLER         reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    /               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    *               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    -               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    +               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    BOEQ            reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    SOEQ            reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    INEQUALITY      reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    EQUALITY        reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    $end            reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    )               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    COMMA           reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    }               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)
    ;               reduce using rule 3 (expr -> EVENT ID ( ) { expr } .)


state 78

    (4) expr -> EVENT ID ( args ) { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 82
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 79

    (5) expr -> FOR ( ID ; expr ; expr . ) { expr }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    )               shift and go to state 83
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 80

    (6) expr -> IF ( expr ) { expr } .
    (7) expr -> IF ( expr ) { expr } . ELSE { expr }
    OR              reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    AND             reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    BIGGER          reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    SMALLER         reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    /               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    *               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    -               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    +               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    BOEQ            reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    SOEQ            reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    INEQUALITY      reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    EQUALITY        reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    $end            reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    )               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    COMMA           reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    }               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    ;               reduce using rule 6 (expr -> IF ( expr ) { expr } .)
    ELSE            shift and go to state 84


state 81

    (2) expr -> DEFINE ID ( args ) { expr } .
    OR              reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    AND             reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    BIGGER          reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    SMALLER         reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    /               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    *               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    -               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    +               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    BOEQ            reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    SOEQ            reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    INEQUALITY      reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    EQUALITY        reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    $end            reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    )               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    COMMA           reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    }               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)
    ;               reduce using rule 2 (expr -> DEFINE ID ( args ) { expr } .)


state 82

    (4) expr -> EVENT ID ( args ) { expr } .
    OR              reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    AND             reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    BIGGER          reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    SMALLER         reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    /               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    *               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    -               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    +               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    BOEQ            reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    SOEQ            reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    INEQUALITY      reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    EQUALITY        reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    $end            reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    )               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    COMMA           reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    }               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)
    ;               reduce using rule 4 (expr -> EVENT ID ( args ) { expr } .)


state 83

    (5) expr -> FOR ( ID ; expr ; expr ) . { expr }
    {               shift and go to state 85


state 84

    (7) expr -> IF ( expr ) { expr } ELSE . { expr }
    {               shift and go to state 86


state 85

    (5) expr -> FOR ( ID ; expr ; expr ) { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 87

state 86

    (7) expr -> IF ( expr ) { expr } ELSE { . expr }
    (1) expr -> . DEFINE ID ( ) { expr }
    (2) expr -> . DEFINE ID ( args ) { expr }
    (3) expr -> . EVENT ID ( ) { expr }
    (4) expr -> . EVENT ID ( args ) { expr }
    (5) expr -> . FOR ( ID ; expr ; expr ) { expr }
    (6) expr -> . IF ( expr ) { expr }
    (7) expr -> . IF ( expr ) { expr } ELSE { expr }
    (8) expr -> . SPRITE ID { expr }
    (9) expr -> . ID ( )
    (10) expr -> . ID ( expr )
    (11) expr -> . ID ASSING expr
    (12) expr -> . expr OR expr
    (13) expr -> . expr AND expr
    (14) expr -> . expr BIGGER expr
    (15) expr -> . expr SMALLER expr
    (16) expr -> . expr / expr
    (17) expr -> . expr * expr
    (18) expr -> . expr - expr
    (19) expr -> . expr + expr
    (20) expr -> . expr BOEQ expr
    (21) expr -> . expr SOEQ expr
    (22) expr -> . expr INEQUALITY expr
    (23) expr -> . expr EQUALITY expr
    (24) expr -> . NUMBER
    (25) expr -> . STRING
    (26) expr -> . ID
    DEFINE          shift and go to state 2
    EVENT           shift and go to state 4
    FOR             shift and go to state 5
    IF              shift and go to state 6
    SPRITE          shift and go to state 7
    ID              shift and go to state 3
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9

    expr                           shift and go to state 88

state 87

    (5) expr -> FOR ( ID ; expr ; expr ) { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 89
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 88

    (7) expr -> IF ( expr ) { expr } ELSE { expr . }
    (12) expr -> expr . OR expr
    (13) expr -> expr . AND expr
    (14) expr -> expr . BIGGER expr
    (15) expr -> expr . SMALLER expr
    (16) expr -> expr . / expr
    (17) expr -> expr . * expr
    (18) expr -> expr . - expr
    (19) expr -> expr . + expr
    (20) expr -> expr . BOEQ expr
    (21) expr -> expr . SOEQ expr
    (22) expr -> expr . INEQUALITY expr
    (23) expr -> expr . EQUALITY expr
    }               shift and go to state 90
    OR              shift and go to state 10
    AND             shift and go to state 11
    BIGGER          shift and go to state 12
    SMALLER         shift and go to state 13
    /               shift and go to state 14
    *               shift and go to state 15
    -               shift and go to state 16
    +               shift and go to state 17
    BOEQ            shift and go to state 18
    SOEQ            shift and go to state 19
    INEQUALITY      shift and go to state 20
    EQUALITY        shift and go to state 21


state 89

    (5) expr -> FOR ( ID ; expr ; expr ) { expr } .
    OR              reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    AND             reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    BIGGER          reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    SMALLER         reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    /               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    *               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    -               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    +               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    BOEQ            reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    SOEQ            reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    INEQUALITY      reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    EQUALITY        reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    $end            reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    )               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    COMMA           reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    }               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)
    ;               reduce using rule 5 (expr -> FOR ( ID ; expr ; expr ) { expr } .)


state 90

    (7) expr -> IF ( expr ) { expr } ELSE { expr } .
    OR              reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    AND             reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    BIGGER          reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    SMALLER         reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    /               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    *               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    -               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    +               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    BOEQ            reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    SOEQ            reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    INEQUALITY      reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    EQUALITY        reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    $end            reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    )               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    COMMA           reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    }               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    ;               reduce using rule 7 (expr -> IF ( expr ) { expr } ELSE { expr } .)


Conflicts:

shift/reduce conflict for OR in state 29 resolved as shift
shift/reduce conflict for AND in state 29 resolved as shift
shift/reduce conflict for BIGGER in state 29 resolved as shift
shift/reduce conflict for SMALLER in state 29 resolved as shift
shift/reduce conflict for / in state 29 resolved as shift
shift/reduce conflict for * in state 29 resolved as shift
shift/reduce conflict for - in state 29 resolved as shift
shift/reduce conflict for + in state 29 resolved as shift
shift/reduce conflict for BOEQ in state 29 resolved as shift
shift/reduce conflict for SOEQ in state 29 resolved as shift
shift/reduce conflict for INEQUALITY in state 29 resolved as shift
shift/reduce conflict for EQUALITY in state 29 resolved as shift
shift/reduce conflict for OR in state 30 resolved as shift
shift/reduce conflict for AND in state 30 resolved as shift
shift/reduce conflict for BIGGER in state 30 resolved as shift
shift/reduce conflict for SMALLER in state 30 resolved as shift
shift/reduce conflict for / in state 30 resolved as shift
shift/reduce conflict for * in state 30 resolved as shift
shift/reduce conflict for - in state 30 resolved as shift
shift/reduce conflict for + in state 30 resolved as shift
shift/reduce conflict for BOEQ in state 30 resolved as shift
shift/reduce conflict for SOEQ in state 30 resolved as shift
shift/reduce conflict for INEQUALITY in state 30 resolved as shift
shift/reduce conflict for EQUALITY in state 30 resolved as shift
shift/reduce conflict for OR in state 31 resolved as shift
shift/reduce conflict for AND in state 31 resolved as shift
shift/reduce conflict for BIGGER in state 31 resolved as shift
shift/reduce conflict for SMALLER in state 31 resolved as shift
shift/reduce conflict for / in state 31 resolved as shift
shift/reduce conflict for * in state 31 resolved as shift
shift/reduce conflict for - in state 31 resolved as shift
shift/reduce conflict for + in state 31 resolved as shift
shift/reduce conflict for BOEQ in state 31 resolved as shift
shift/reduce conflict for SOEQ in state 31 resolved as shift
shift/reduce conflict for INEQUALITY in state 31 resolved as shift
shift/reduce conflict for EQUALITY in state 31 resolved as shift
shift/reduce conflict for OR in state 32 resolved as shift
shift/reduce conflict for AND in state 32 resolved as shift
shift/reduce conflict for BIGGER in state 32 resolved as shift
shift/reduce conflict for SMALLER in state 32 resolved as shift
shift/reduce conflict for / in state 32 resolved as shift
shift/reduce conflict for * in state 32 resolved as shift
shift/reduce conflict for - in state 32 resolved as shift
shift/reduce conflict for + in state 32 resolved as shift
shift/reduce conflict for BOEQ in state 32 resolved as shift
shift/reduce conflict for SOEQ in state 32 resolved as shift
shift/reduce conflict for INEQUALITY in state 32 resolved as shift
shift/reduce conflict for EQUALITY in state 32 resolved as shift
shift/reduce conflict for OR in state 33 resolved as shift
shift/reduce conflict for AND in state 33 resolved as shift
shift/reduce conflict for BIGGER in state 33 resolved as shift
shift/reduce conflict for SMALLER in state 33 resolved as shift
shift/reduce conflict for / in state 33 resolved as shift
shift/reduce conflict for * in state 33 resolved as shift
shift/reduce conflict for - in state 33 resolved as shift
shift/reduce conflict for + in state 33 resolved as shift
shift/reduce conflict for BOEQ in state 33 resolved as shift
shift/reduce conflict for SOEQ in state 33 resolved as shift
shift/reduce conflict for INEQUALITY in state 33 resolved as shift
shift/reduce conflict for EQUALITY in state 33 resolved as shift
shift/reduce conflict for OR in state 34 resolved as shift
shift/reduce conflict for AND in state 34 resolved as shift
shift/reduce conflict for BIGGER in state 34 resolved as shift
shift/reduce conflict for SMALLER in state 34 resolved as shift
shift/reduce conflict for / in state 34 resolved as shift
shift/reduce conflict for * in state 34 resolved as shift
shift/reduce conflict for - in state 34 resolved as shift
shift/reduce conflict for + in state 34 resolved as shift
shift/reduce conflict for BOEQ in state 34 resolved as shift
shift/reduce conflict for SOEQ in state 34 resolved as shift
shift/reduce conflict for INEQUALITY in state 34 resolved as shift
shift/reduce conflict for EQUALITY in state 34 resolved as shift
shift/reduce conflict for OR in state 35 resolved as shift
shift/reduce conflict for AND in state 35 resolved as shift
shift/reduce conflict for BIGGER in state 35 resolved as shift
shift/reduce conflict for SMALLER in state 35 resolved as shift
shift/reduce conflict for / in state 35 resolved as shift
shift/reduce conflict for * in state 35 resolved as shift
shift/reduce conflict for - in state 35 resolved as shift
shift/reduce conflict for + in state 35 resolved as shift
shift/reduce conflict for BOEQ in state 35 resolved as shift
shift/reduce conflict for SOEQ in state 35 resolved as shift
shift/reduce conflict for INEQUALITY in state 35 resolved as shift
shift/reduce conflict for EQUALITY in state 35 resolved as shift
shift/reduce conflict for OR in state 36 resolved as shift
shift/reduce conflict for AND in state 36 resolved as shift
shift/reduce conflict for BIGGER in state 36 resolved as shift
shift/reduce conflict for SMALLER in state 36 resolved as shift
shift/reduce conflict for / in state 36 resolved as shift
shift/reduce conflict for * in state 36 resolved as shift
shift/reduce conflict for - in state 36 resolved as shift
shift/reduce conflict for + in state 36 resolved as shift
shift/reduce conflict for BOEQ in state 36 resolved as shift
shift/reduce conflict for SOEQ in state 36 resolved as shift
shift/reduce conflict for INEQUALITY in state 36 resolved as shift
shift/reduce conflict for EQUALITY in state 36 resolved as shift
shift/reduce conflict for OR in state 37 resolved as shift
shift/reduce conflict for AND in state 37 resolved as shift
shift/reduce conflict for BIGGER in state 37 resolved as shift
shift/reduce conflict for SMALLER in state 37 resolved as shift
shift/reduce conflict for / in state 37 resolved as shift
shift/reduce conflict for * in state 37 resolved as shift
shift/reduce conflict for - in state 37 resolved as shift
shift/reduce conflict for + in state 37 resolved as shift
shift/reduce conflict for BOEQ in state 37 resolved as shift
shift/reduce conflict for SOEQ in state 37 resolved as shift
shift/reduce conflict for INEQUALITY in state 37 resolved as shift
shift/reduce conflict for EQUALITY in state 37 resolved as shift
shift/reduce conflict for OR in state 38 resolved as shift
shift/reduce conflict for AND in state 38 resolved as shift
shift/reduce conflict for BIGGER in state 38 resolved as shift
shift/reduce conflict for SMALLER in state 38 resolved as shift
shift/reduce conflict for / in state 38 resolved as shift
shift/reduce conflict for * in state 38 resolved as shift
shift/reduce conflict for - in state 38 resolved as shift
shift/reduce conflict for + in state 38 resolved as shift
shift/reduce conflict for BOEQ in state 38 resolved as shift
shift/reduce conflict for SOEQ in state 38 resolved as shift
shift/reduce conflict for INEQUALITY in state 38 resolved as shift
shift/reduce conflict for EQUALITY in state 38 resolved as shift
shift/reduce conflict for OR in state 39 resolved as shift
shift/reduce conflict for AND in state 39 resolved as shift
shift/reduce conflict for BIGGER in state 39 resolved as shift
shift/reduce conflict for SMALLER in state 39 resolved as shift
shift/reduce conflict for / in state 39 resolved as shift
shift/reduce conflict for * in state 39 resolved as shift
shift/reduce conflict for - in state 39 resolved as shift
shift/reduce conflict for + in state 39 resolved as shift
shift/reduce conflict for BOEQ in state 39 resolved as shift
shift/reduce conflict for SOEQ in state 39 resolved as shift
shift/reduce conflict for INEQUALITY in state 39 resolved as shift
shift/reduce conflict for EQUALITY in state 39 resolved as shift
shift/reduce conflict for OR in state 40 resolved as shift
shift/reduce conflict for AND in state 40 resolved as shift
shift/reduce conflict for BIGGER in state 40 resolved as shift
shift/reduce conflict for SMALLER in state 40 resolved as shift
shift/reduce conflict for / in state 40 resolved as shift
shift/reduce conflict for * in state 40 resolved as shift
shift/reduce conflict for - in state 40 resolved as shift
shift/reduce conflict for + in state 40 resolved as shift
shift/reduce conflict for BOEQ in state 40 resolved as shift
shift/reduce conflict for SOEQ in state 40 resolved as shift
shift/reduce conflict for INEQUALITY in state 40 resolved as shift
shift/reduce conflict for EQUALITY in state 40 resolved as shift
shift/reduce conflict for OR in state 44 resolved as shift
shift/reduce conflict for AND in state 44 resolved as shift
shift/reduce conflict for BIGGER in state 44 resolved as shift
shift/reduce conflict for SMALLER in state 44 resolved as shift
shift/reduce conflict for / in state 44 resolved as shift
shift/reduce conflict for * in state 44 resolved as shift
shift/reduce conflict for - in state 44 resolved as shift
shift/reduce conflict for + in state 44 resolved as shift
shift/reduce conflict for BOEQ in state 44 resolved as shift
shift/reduce conflict for SOEQ in state 44 resolved as shift
shift/reduce conflict for INEQUALITY in state 44 resolved as shift
shift/reduce conflict for EQUALITY in state 44 resolved as shift
shift/reduce conflict for COMMA in state 50 resolved as shift